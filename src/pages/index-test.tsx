import { type NextPage } from "next";
import Head from "next/head";
import { isEmpty, not, path, take, takeLast } from "ramda";
import { useEffect, useState } from "react";
import { TrackListing } from "../components/TrackListing";
import { trpc } from "../utils/trpc";
import { useAllTracksQuery } from "../utils/useGetListenedTracksQuery";
import { useSession, signIn, signOut } from "next-auth/react";

function average(curr, agg) {
  console.log(curr);
  if (!curr) return agg;
  return (curr + agg) / 2;
}

const Home: NextPage = () => {
  const { status } = useSession();

  const [recommendationParameters, setRecommendationParameters] = useState({
    seedTracks: "",
    seedArtists: undefined,
    target_valence: undefined,
    target_energy: undefined,
    target_danceability: undefined,
    target_acousticness: undefined,
    target_loudness: undefined,
  });
  const [trackId, setTrackId] = useState(undefined);
  const [fetch, setFetch] = useState(0);
  const [first, setFirst] = useState(undefined);
  const [second, setSecond] = useState(undefined);
  const [third, setThird] = useState(undefined);
  const [fourth, setFourth] = useState(undefined);
  const [params, setParams] = useState({
    target_valence: undefined,
    target_energy: undefined,
    target_danceability: undefined,
    target_acousticness: undefined,
    target_loudness: undefined,
  });
  const { data: tracks, isLoading, refetch: refetchAll } = useAllTracksQuery();
  useEffect(() => {
    refetchAll();
  }, []);
  trpc.spotify.getRecommendations.useQuery(recommendationParameters, {
    enabled: not(isEmpty(path(["seedTracks"], recommendationParameters))),
    onSuccess: (data) => {
      if (fetch === 1) setFirst(data);
      if (fetch === 2) setSecond(data);
      if (fetch === 4) setThird(data);
      // if (fetch === 5) setFourth(data);
    },
  });
  const { data: features, refetch: getFeatures } =
    trpc.spotify.getTrackFeatures.useQuery(trackId, {
      enabled: !!trackId,
      onSuccess: (data) => {
        setParams({
          target_valence: average(params.target_valence, data?.body.valence),
          target_energy: average(params.target_energy, data?.body.energy),
          target_danceability: average(
            params.target_danceability,
            data?.body.danceability
          ),
          // target_acousticness: average(
          //   params.target_acousticness,
          //   data?.body.acousticness
          // ),
          target_loudness: average(params.target_loudness, data?.body.loudness),
        });
      },
    });

  const addToRecommendation = async (id) => {
    setFetch(fetch + 1);
    setTrackId(id);
    await getFeatures();
    setRecommendationParameters({
      ...recommendationParameters,
      seedTracks:
        fetch === 0 || fetch === 1 || fetch === 2
          ? id
          : recommendationParameters.seedTracks.concat(",", id),
      // target_energy: fetch > 2 ? params.target_energy : undefined,
      // target_danceability: fetch > 2 ? params.target_danceability : undefined,
      target_loudness: fetch > 2 ? params.target_loudness : undefined,
      target_valence: fetch > 2 ? params.target_valence : undefined,
    });
  };
  if (status === "unauthenticated") {
    return (
      <>
        Not signed in <br /> <button onClick={() => signIn()}>Sign in</button>
      </>
    );
  }
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-gray-800 to-gray-900">
        <div className="mx-auto max-w-4xl ">
          <div className="grid grid-flow-col grid-cols-1 grid-rows-6 ">
            {/* auto-rows-max grid-cols-2 gap-4 sm:grid-cols-3 md:grid-cols-4"> */}
            {!isLoading && (
              <>
                {take(6, tracks.slice(15))?.map((track) => (
                  <TrackListing
                    key={track.id}
                    track={track}
                    onClick={addToRecommendation}
                  />
                ))}
              </>
            )}
            <>
              {first?.body.tracks.map((track) => (
                <TrackListing
                  key={track.id}
                  track={track}
                  onClick={addToRecommendation}
                />
              ))}
            </>{" "}
            <>
              {second?.body.tracks.map((track) => (
                <TrackListing
                  key={track.id}
                  track={track}
                  onClick={addToRecommendation}
                />
              ))}
            </>
            <>
              {third?.body.tracks.map((track) => (
                <TrackListing
                  key={track.id}
                  track={track}
                  onClick={addToRecommendation}
                />
              ))}
            </>
            <>
              {fourth?.body.tracks.map((track) => (
                <TrackListing
                  key={track.id}
                  track={track}
                  onClick={addToRecommendation}
                />
              ))}
            </>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
